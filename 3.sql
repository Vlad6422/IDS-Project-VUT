-- 2 FAZE PROJEKTU 
-- Drop existed tables
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Client CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountMember CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Account CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Transactionw CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountStatement CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BankEmployee CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountAccountMember CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BankEmployeeClient CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

-- Create the Client table
CREATE TABLE Client (
    ClientID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Age INT NOT NULL,
    Email VARCHAR(50) NOT NULL,
    PhoneNumber VARCHAR(20) NOT NULL
);

-- Create the AccountMember table
CREATE TABLE AccountMember (
    AccountMemberID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Age INT NOT NULL
);

-- Create the Account table
CREATE TABLE Account (
    AccountID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UserName VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    TransactionLimit INT NOT NULL,
    SecureWord VARCHAR(50) NOT NULL,
    Currency VARCHAR(10) NOT NULL,
    ClientID INT NOT NULL
);

-- Create the Transaction table
CREATE TABLE Transactionw (
    TransactionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TransactionType VARCHAR(50) NOT NULL,
    TransactionDate DATE NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    BeneficiaryName VARCHAR(50) NOT NULL,
    AccountID INT NOT NULL
);

-- Create the AccountStatement table
CREATE TABLE AccountStatement (
    StatementID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BankName VARCHAR(50) NOT NULL,
    DateFrom DATE NOT NULL,
    DateTo DATE NOT NULL,
    CreationDate DATE NOT NULL,
    AccountID INT NOT NULL
);

-- Create the BankEmployee table
CREATE TABLE BankEmployee (
    EmployeeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    PhoneNumber VARCHAR(20) NOT NULL,
    Email VARCHAR(50) NOT NULL
);

-- Create the relationship between Account and AccountMember tables (1 account can have multiple AccountMembers)
CREATE TABLE AccountAccountMember (
AccountID NUMBER NOT NULL,
AccountMemberID NUMBER NOT NULL,
CONSTRAINT PK_AccountAccountMember PRIMARY KEY (AccountID, AccountMemberID),
CONSTRAINT FK_AccountAccountMember_Account FOREIGN KEY (AccountID) REFERENCES Account(AccountID),
CONSTRAINT FK_AccountAccountMember_AccountMember FOREIGN KEY (AccountMemberID) REFERENCES AccountMember(AccountMemberID)
);

--RELATIONS--
-- Create the relationship between Account and Client tables (1 Klient can have multiple accounts)
 ALTER TABLE Account ADD CONSTRAINT FK_Client_Account FOREIGN KEY (ClientID) REFERENCES Client(ClientID);

-- Create the relationship between Account and Transaction tables (1 account can have multiple transactions)
ALTER TABLE Transactionw ADD CONSTRAINT FK_Account_Transaction FOREIGN KEY (AccountID) REFERENCES Account(AccountID);

-- Create the relationship between Client and AccountStatement tables (1 client can have multiple account statements)
ALTER TABLE AccountStatement ADD CONSTRAINT FK_Client_AccountStatement FOREIGN KEY (AccountID) REFERENCES Account(AccountID);

-- Create the relationship between BankEmployee and Client tables (1 bank employee can manage multiple clients)
CREATE TABLE BankEmployeeClient (
EmployeeID NUMBER NOT NULL,
ClientID NUMBER NOT NULL,
CONSTRAINT PK_BankEmployeeClient PRIMARY KEY (EmployeeID, ClientID),
CONSTRAINT FK_BankEmployeeClient_Employee FOREIGN KEY (EmployeeID) REFERENCES BankEmployee(EmployeeID),
CONSTRAINT FK_BankEmployeeClient_Client FOREIGN KEY (ClientID) REFERENCES Client(ClientID)
);

--CHECK--
ALTER TABLE Client ADD CONSTRAINT CHK_Client_Age CHECK (Age >= 18);
ALTER TABLE Account ADD CONSTRAINT CHK_Account_TransactionLimit CHECK (TransactionLimit >= 0);
ALTER TABLE Transactionw ADD CONSTRAINT CHK_Transaction_Amount CHECK (Amount > 0);
ALTER TABLE AccountStatement ADD CONSTRAINT CHK_AccountStatement_Dates CHECK (DateFrom <= DateTo);
ALTER TABLE BankEmployee ADD CONSTRAINT UQ_BankEmployee_Email UNIQUE (Email);
ALTER TABLE Client ADD CONSTRAINT UQ_Client_Email UNIQUE (Email);

-- Insert sample data into the Client table
INSERT INTO Client (FirstName, LastName, Age, Email, PhoneNumber)
    SELECT 'John', 'Doe', 25, 'johndoe@example.com', '123456789' FROM DUAL UNION ALL
    SELECT 'Jane', 'Doe', 30, 'janedoe@example.com', '987654321' FROM DUAL UNION ALL
    SELECT 'Mark', 'Smith', 45, 'marksmith@example.com', '555444333' FROM DUAL UNION ALL
    SELECT 'Jiri', 'Zabovresky', 50, 'jirizabovresky@example.com', '513454333' FROM DUAL;

-- Insert sample data into the AccountMember table
INSERT INTO AccountMember (FirstName, LastName, Age)
    SELECT 'Mary', 'Smith', 40 FROM DUAL UNION ALL
    SELECT 'Tom', 'Johnson', 35 FROM DUAL;

-- Insert sample data into the Account table
INSERT INTO Account (UserName, Password, TransactionLimit, SecureWord, Currency, ClientID)
    SELECT 'johndoe', 'password1', 10000, 'secureword1', 'USD', 1 FROM DUAL UNION ALL
    SELECT 'janedoe', 'password2', 5000, 'secureword2', 'EUR', 2 FROM DUAL UNION ALL
    SELECT 'marksmith', 'password3', 7500, 'secureword3', 'GBP', 3 FROM DUAL;


-- Insert sample data into the Transaction table
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
    SELECT 'Deposit', TO_DATE('2023-01-01', 'YYYY-MM-DD'), 5000, 'John Doe', 1 FROM DUAL UNION ALL
    SELECT 'Deposit', TO_DATE('2022-01-01', 'YYYY-MM-DD'), 5000, 'John Doe', 1 FROM DUAL UNION ALL
    SELECT 'Withdrawal', TO_DATE('2022-01-05', 'YYYY-MM-DD'), 2500, 'Jane Doe', 2 FROM DUAL UNION ALL
    SELECT 'Deposit', TO_DATE('2022-01-10', 'YYYY-MM-DD'), 10000, 'Mark Smith', 3 FROM DUAL UNION ALL
    SELECT 'Transfer', TO_DATE('2022-01-15', 'YYYY-MM-DD'), 7500, 'Mary Smith', 1 FROM DUAL UNION ALL
    SELECT 'Transfer', TO_DATE('2022-01-20', 'YYYY-MM-DD'), 2000, 'Tom Johnson', 2 FROM DUAL;

-- Insert sample data into the AccountStatement table
INSERT INTO AccountStatement (BankName, DateFrom, DateTo, CreationDate, AccountID)
    SELECT 'Bank of America', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 1 FROM DUAL UNION ALL
    SELECT 'HSBC', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 2 FROM DUAL UNION ALL
    SELECT 'Barclays', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 3 FROM DUAL;

-- Insert sample data into the BankEmployee table
INSERT INTO BankEmployee (FirstName, LastName, PhoneNumber, Email)
    SELECT 'Adam', 'Smith', '111222333', 'adamsmith@example.com' FROM DUAL UNION ALL
    SELECT 'Emily', 'Johnson', '444555666', 'emilyjohnson@example.com' FROM DUAL UNION ALL
    SELECT 'Jack', 'Brown', '777888999', 'jackbrown@example.com' FROM DUAL;


-- Insert sample data into the AccountAccountMember table (1 account can have multiple AccountMembers)
INSERT INTO AccountAccountMember (AccountID, AccountMemberID)
    SELECT 1, 1 FROM DUAL UNION ALL
    SELECT 2, 2 FROM DUAL UNION ALL
    SELECT 3, 1 FROM DUAL UNION ALL
    SELECT 3, 2 FROM DUAL;

-- Insert sample data into the BankEmployeeClient table (1 bank employee can manage multiple clients)
INSERT INTO BankEmployeeClient (EmployeeID, ClientID)
    SELECT 1, 1 FROM DUAL UNION ALL
    SELECT 1, 2 FROM DUAL UNION ALL
    SELECT 2, 2 FROM DUAL UNION ALL
    SELECT 3, 3 FROM DUAL;

-- 3 FAZE PROJEKTU
-- Query all accounts and their associated clients --
SELECT Account.UserName, Client.FirstName, Client.LastName
FROM Account
JOIN Client ON Account.ClientID = Client.ClientID;


-- Query to find the account statements created in February 2022 --
SELECT *
FROM AccountStatement
WHERE to_char(creationdate, 'MM/YYYY') = '02/2022';


-- Query to find the average age of account members --
SELECT AVG(Age) as AverageAge
FROM AccountMember;


-- Query to find the accounts with a transaction limit higher than the average transaction limit --
SELECT *
FROM Account
WHERE TransactionLimit > (SELECT AVG(TransactionLimit) FROM Account);


-- Query to show the average transaction amount for each account --
SELECT Account.UserName, AVG(Transactionw.Amount) as AvgAmount
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
GROUP BY Account.AccountID,Account.UserName;


-- Query to find the clients who have not made any transactions --
SELECT Client.FirstName, Client.LastName
FROM Client
LEFT JOIN Account ON Client.ClientID = Account.ClientID
LEFT JOIN Transactionw ON Account.AccountID = Transactionw.AccountID
WHERE Transactionw.TransactionID IS NULL;


-- Query to find the clients who have made a transfer transaction in January 2022 --
SELECT c.FirstName, c.LastName
FROM Client c
JOIN Account a ON c.ClientID = a.ClientID
JOIN Transactionw t ON a.AccountID = t.AccountID
WHERE t.TransactionType = 'Transfer' AND to_char(TransactionDate, 'MM/YYYY') = '01/2022'
GROUP BY c.ClientID,c.FirstName, c.LastName;


-- Query all transactions and their associated account and client information --
SELECT Transactionw.TransactionType, Transactionw.TransactionDate, Transactionw.Amount,
       Account.UserName, Client.FirstName, Client.LastName
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
JOIN Client ON Account.ClientID = Client.ClientID;


-- Query all transactions made by clients over 30 years old --
SELECT Transactionw.TransactionType, Transactionw.TransactionDate, Transactionw.Amount,
       Client.FirstName, Client.LastName, Client.Age
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
JOIN Client ON Account.ClientID = Client.ClientID
WHERE Client.Age > 30;


-- Query the total amount deposited by each client --
SELECT Client.FirstName, Client.LastName, SUM(Transactionw.Amount) as TotalDeposits
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
JOIN Client ON Account.ClientID = Client.ClientID
WHERE Transactionw.TransactionType = 'Deposit'
GROUP BY Client.ClientID, Client.FirstName, Client.LastName;


-- Query the number of transactions made by each account --
SELECT Account.UserName, COUNT(Transactionw.TransactionID) as NumTransactions
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
GROUP BY Account.AccountID,Account.UserName;


-- Query all clients who have made a withdrawal --
SELECT DISTINCT Client.FirstName, Client.LastName
FROM Transactionw
JOIN Account ON Transactionw.AccountID = Account.AccountID
JOIN Client ON Account.ClientID = Client.ClientID
WHERE Transactionw.TransactionType = 'Withdrawal';


-- Query to find the total amount withdrawn by each client in USD --
SELECT c.FirstName, c.LastName, SUM(t.Amount) as TotalWithdrawals
FROM Transactionw t
JOIN Account a ON t.AccountID = a.AccountID
JOIN Client c ON a.ClientID = c.ClientID
WHERE t.TransactionType = 'Withdrawal' AND a.Currency = 'USD'
GROUP BY c.ClientID,c.FirstName, c.LastName;


-- Query all clients managed by a specific bank employee --
SELECT Client.FirstName, Client.LastName, BankEmployee.FirstName as BankEmpFirstName, BankEmployee.LastName as BankEmpLastName
FROM BankEmployeeClient
JOIN BankEmployee ON BankEmployeeClient.EmployeeID = BankEmployee.EmployeeID
JOIN Client ON BankEmployeeClient.ClientID = Client.ClientID
WHERE BankEmployee.LastName = 'Smith';


-- Query to find the bank employees who manage at least two clients --
SELECT e.FirstName, e.LastName
FROM BankEmployee e
JOIN BankEmployeeClient ec ON e.EmployeeID = ec.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(ec.ClientID) >= 2;


-- Find the total number of transactions made by clients managed by each bank employee --
SELECT BankEmployee.FirstName, BankEmployee.LastName, COUNT(*) as TotalTransactions
FROM BankEmployee
JOIN BankEmployeeClient ON BankEmployee.EmployeeID = BankEmployeeClient.EmployeeID
JOIN Client ON BankEmployeeClient.ClientID = Client.ClientID
JOIN Account ON Client.ClientID = Account.ClientID
JOIN Transactionw ON Account.AccountID = Transactionw.AccountID
GROUP BY BankEmployee.EmployeeID,BankEmployee.FirstName, BankEmployee.LastName;


-- Query to select the first and last name of all clients who have at least one account with currency USD --
SELECT *
FROM Client c
WHERE EXISTS (
  SELECT 1
  FROM Account a
  WHERE a.ClientID = c.ClientID
  AND a.Currency = 'USD'
);
--The subquery in the EXISTS predicate returns 1 if there is at least one account with currency USD for a given client, and 0 otherwise.
--If the subquery returns 1 for a client, then that client's first and last name will be included in the result set.

-- Same query,but using IN --
SELECT *
FROM Client
WHERE ClientID IN (
  SELECT ClientID
  FROM Account
  WHERE Currency = 'USD'
)


-- Query to predicate to find all clients who have made at least one deposit
SELECT FirstName, LastName
FROM Client c
WHERE EXISTS (
  SELECT 1
  FROM Transactionw t
  JOIN Account a ON t.AccountID = a.AccountID
  WHERE t.TransactionType = 'Deposit' AND a.ClientID = c.ClientID);


-- Query to get the total amount of deposits and withdrawals for each month of the year --
SELECT EXTRACT(YEAR FROM Transactionw.TransactionDate) AS Year,
       EXTRACT(MONTH FROM Transactionw.TransactionDate) AS Month,
       SUM(CASE WHEN Transactionw.TransactionType = 'Deposit' THEN Transactionw.Amount ELSE 0 END) AS TotalDeposits,
       SUM(CASE WHEN Transactionw.TransactionType = 'Withdrawal' THEN Transactionw.Amount ELSE 0 END) AS TotalWithdrawals
FROM Transactionw
GROUP BY EXTRACT(YEAR FROM Transactionw.TransactionDate), EXTRACT(MONTH FROM Transactionw.TransactionDate)
ORDER BY Year, Month;
