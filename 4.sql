         --- 2 FAZE PROJEKTU ---
---------- Drop existed tables ----------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Client CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountMember CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Account CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Transactionw CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountStatement CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BankEmployee CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AccountAccountMember CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BankEmployeeClient CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

DROP MATERIALIZED VIEW "account_trans_count";

-- Create the Client table
CREATE TABLE Client (
    ClientID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Age INT NOT NULL,
    Email VARCHAR(50) NOT NULL,
    PhoneNumber VARCHAR(20) NOT NULL
);

-- Create the AccountMember table
CREATE TABLE AccountMember (
    AccountMemberID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Age INT NOT NULL
);

-- Create the Account table
CREATE TABLE Account (
    AccountID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UserName VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    TransactionLimit INT NOT NULL,
    SecureWord VARCHAR(50) NOT NULL,
    Balance INT DEFAULT 0,
    Currency VARCHAR(10) NOT NULL,
    ClientID INT NOT NULL
);

-- Create the Transaction table
CREATE TABLE Transactionw (
    TransactionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TransactionType VARCHAR(50) NOT NULL,
    TransactionDate DATE NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    BeneficiaryName VARCHAR(50) NOT NULL,
    AccountID INT NOT NULL
);

-- Create the AccountStatement table
CREATE TABLE AccountStatement (
    StatementID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BankName VARCHAR(50) NOT NULL,
    DateFrom DATE NOT NULL,
    DateTo DATE NOT NULL,
    CreationDate DATE NOT NULL,
    AccountID INT NOT NULL
);

-- Create the BankEmployee table
CREATE TABLE BankEmployee (
    EmployeeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    PhoneNumber VARCHAR(20) NOT NULL,
    Email VARCHAR(50) NOT NULL
);

-- Create the relationship between Account and AccountMember tables (1 account can have multiple AccountMembers)
CREATE TABLE AccountAccountMember (
AccountID NUMBER NOT NULL,
AccountMemberID NUMBER NOT NULL,
CONSTRAINT PK_AccountAccountMember PRIMARY KEY (AccountID, AccountMemberID),
CONSTRAINT FK_AccountAccountMember_Account FOREIGN KEY (AccountID) REFERENCES Account(AccountID),
CONSTRAINT FK_AccountAccountMember_AccountMember FOREIGN KEY (AccountMemberID) REFERENCES AccountMember(AccountMemberID)
);

--RELATIONS--
-- Create the relationship between Account and Client tables (1 Klient can have multiple accounts)
 ALTER TABLE Account ADD CONSTRAINT FK_Client_Account FOREIGN KEY (ClientID) REFERENCES Client(ClientID);

-- Create the relationship between Account and Transaction tables (1 account can have multiple transactions)
ALTER TABLE Transactionw ADD CONSTRAINT FK_Account_Transaction FOREIGN KEY (AccountID) REFERENCES Account(AccountID);

-- Create the relationship between Client and AccountStatement tables (1 client can have multiple account statements)
ALTER TABLE AccountStatement ADD CONSTRAINT FK_Client_AccountStatement FOREIGN KEY (AccountID) REFERENCES Account(AccountID);

-- Create the relationship between BankEmployee and Client tables (1 bank employee can manage multiple clients)
CREATE TABLE BankEmployeeClient (
EmployeeID NUMBER NOT NULL,
ClientID NUMBER NOT NULL,
CONSTRAINT PK_BankEmployeeClient PRIMARY KEY (EmployeeID, ClientID),
CONSTRAINT FK_BankEmployeeClient_Employee FOREIGN KEY (EmployeeID) REFERENCES BankEmployee(EmployeeID),
CONSTRAINT FK_BankEmployeeClient_Client FOREIGN KEY (ClientID) REFERENCES Client(ClientID)
);

--CHECK--
ALTER TABLE Client ADD CONSTRAINT CHK_Client_Age CHECK (Age >= 18);
ALTER TABLE Account ADD CONSTRAINT CHK_Account_TransactionLimit CHECK (TransactionLimit >= 0);
ALTER TABLE Transactionw ADD CONSTRAINT CHK_Transaction_Amount CHECK (Amount > 0);
ALTER TABLE AccountStatement ADD CONSTRAINT CHK_AccountStatement_Dates CHECK (DateFrom <= DateTo);
ALTER TABLE BankEmployee ADD CONSTRAINT UQ_BankEmployee_Email UNIQUE (Email);
ALTER TABLE Client ADD CONSTRAINT UQ_Client_Email UNIQUE (Email);

---------------------------------- TRIGGERS -------------------------------------------
--Trigger to update the balance of an account after a transaction is made:
CREATE OR REPLACE TRIGGER update_account_balance
AFTER INSERT ON Transactionw
FOR EACH ROW
BEGIN
  IF :NEW.TransactionType = 'Deposit' THEN
    UPDATE Account SET Balance = Balance + :NEW.Amount WHERE AccountID = :NEW.AccountID;
  ELSIF :NEW.TransactionType = 'Withdrawal' THEN
    UPDATE Account SET Balance = Balance - :NEW.Amount WHERE AccountID = :NEW.AccountID;
  END IF;
END;

--Trigger to prevent a client from being deleted if they have any associated accounts:
CREATE OR REPLACE TRIGGER prevent_delete_client
BEFORE DELETE ON Client
FOR EACH ROW
DECLARE
  count_accounts NUMBER;
BEGIN
  SELECT COUNT(*) INTO count_accounts FROM Account WHERE ClientID = :OLD.ClientID;
  IF count_accounts > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Cannot delete client. Client has associated accounts.');
  END IF;
END;

--Trigger to prevent a transaction from being made if the account has reached its transaction limit:
CREATE OR REPLACE TRIGGER prevent_transaction_limit
BEFORE INSERT ON Transactionw
FOR EACH ROW
DECLARE
  account_limit INT;
BEGIN
  SELECT TransactionLimit INTO account_limit FROM Account WHERE AccountID = :NEW.AccountID;
  IF :NEW.Amount > account_limit THEN
    RAISE_APPLICATION_ERROR(-20002, 'Cannot complete transaction. Transaction amount exceeds account limit.');
  END IF;
END;

-------------------- INSERTS AND SELECTS FOR TRIGGERS DEMONSTRATION --------------------

-- Insert sample data into the Client table
INSERT INTO Client (FirstName, LastName, Age, Email, PhoneNumber)
    SELECT 'John', 'Doe', 25, 'johndoe@example.com', '123456789' FROM DUAL UNION ALL
    SELECT 'Jane', 'Doe', 30, 'janedoe@example.com', '987654321' FROM DUAL UNION ALL
    SELECT 'Mark', 'Smith', 45, 'marksmith@example.com', '555444333' FROM DUAL;

-- Insert sample data into the AccountMember table
INSERT INTO AccountMember (FirstName, LastName, Age)
    SELECT 'Mary', 'Smith', 40 FROM DUAL UNION ALL
    SELECT 'Tom', 'Johnson', 35 FROM DUAL;

-- Insert sample data into the Account table
INSERT INTO Account (UserName, Password, TransactionLimit, SecureWord, Currency, ClientID)
    SELECT 'johndoe', 'password1', 10000, 'secureword1', 'USD', 1 FROM DUAL UNION ALL
    SELECT 'janedoe', 'password3', 5000, 'secureword3', 'EUR', 2 FROM DUAL UNION ALL
    SELECT 'marksmith', 'password4', 7500, 'secureword4', 'GBP', 3 FROM DUAL;

-- Insert sample data into the AccountStatement table
INSERT INTO AccountStatement (BankName, DateFrom, DateTo, CreationDate, AccountID)
    SELECT 'Bank of America', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 1 FROM DUAL UNION ALL
    SELECT 'HSBC', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 2 FROM DUAL UNION ALL
    SELECT 'Barclays', TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-01-31', 'YYYY-MM-DD'), TO_DATE('2022-02-01', 'YYYY-MM-DD'), 3 FROM DUAL;

-- Insert sample data into the BankEmployee table
INSERT INTO BankEmployee (FirstName, LastName, PhoneNumber, Email)
    SELECT 'Adam', 'Smith', '111222333', 'adamsmith@example.com' FROM DUAL UNION ALL
    SELECT 'Emily', 'Johnson', '444555666', 'emilyjohnson@example.com' FROM DUAL UNION ALL
    SELECT 'Jack', 'Brown', '777888999', 'jackbrown@example.com' FROM DUAL;

-- Insert sample data into the AccountAccountMember table (1 account can have multiple AccountMembers)
INSERT INTO AccountAccountMember (AccountID, AccountMemberID)
    SELECT 1, 1 FROM DUAL UNION ALL
    SELECT 2, 2 FROM DUAL UNION ALL
    SELECT 3, 1 FROM DUAL UNION ALL
    SELECT 3, 2 FROM DUAL;

-- Insert sample data into the BankEmployeeClient table (1 bank employee can manage multiple clients)
INSERT INTO BankEmployeeClient (EmployeeID, ClientID)
    SELECT 1, 1 FROM DUAL UNION ALL
    SELECT 1, 2 FROM DUAL UNION ALL
    SELECT 2, 2 FROM DUAL UNION ALL
    SELECT 3, 3 FROM DUAL;


-- Data in tables from the start
select * from Account;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Deposit', TO_DATE('2023-01-01', 'YYYY-MM-DD'), 1000, 'John Doe', 1);
-- Show the balance changes after transaction on the 1 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 1;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Withdrawal', TO_DATE('2022-01-01', 'YYYY-MM-DD'), 400, 'John Doe', 1);
-- Show the balance changes after transaction on the 1 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 1;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Deposit', TO_DATE('2022-01-05', 'YYYY-MM-DD'), 300, 'Jane Doe', 2);
-- Show the balance changes after transaction on the 2 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 2;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Deposit', TO_DATE('2022-01-10', 'YYYY-MM-DD'), 200, 'Mark Smith', 3);
-- Show the balance changes after transaction on the 3 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 3;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Withdrawal', TO_DATE('2023-01-01', 'YYYY-MM-DD'), 100, 'John Doe', 1);
-- Show the balance changes after transaction on the 1 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 1;

-- Insert data for triggers demonstration
INSERT INTO Transactionw (TransactionType, TransactionDate, Amount, BeneficiaryName, AccountID)
VALUES ('Deposit', TO_DATE('2022-01-20', 'YYYY-MM-DD'), 100, 'Tom Johnson', 2);
-- Show the balance changes after transaction on the 2 account
SELECT AccountID, UserName, Balance
FROM Account
WHERE AccountID = 2;

--------------------------------- Procedure ---------------------------------
--Increase Ballance
CREATE OR REPLACE PROCEDURE increase_account_balance(
  account_id IN NUMBER,
  amount IN NUMBER
)
IS
  current_balance NUMBER;
BEGIN
  -- Get the current balance of the account
  SELECT Balance INTO current_balance FROM Account WHERE AccountID = account_id;

  -- Increase the balance by the specified amount
  current_balance := current_balance + amount;

  -- Update the account balance
  UPDATE Account SET Balance = current_balance WHERE AccountID = account_id;

  -- Output a message confirming the increase in balance
  DBMS_OUTPUT.PUT_LINE('Account ' || account_id || ' balance increased by ' || amount || ' units.');
END;
--ADD CLIENT
CREATE OR REPLACE PROCEDURE add_client(
	p_first_name IN Client.FirstName%TYPE,
	p_last_name IN Client.LastName%TYPE,
	p_age IN Client.Age%TYPE,
	p_email IN Client.Email%TYPE,
	p_phone_number IN Client.PhoneNumber%TYPE
	)
	AS
	BEGIN
	INSERT INTO Client (FirstName, LastName, Age, Email, PhoneNumber)
	VALUES (p_first_name, p_last_name, p_age, p_email, p_phone_number);
	DBMS_OUTPUT.PUT_LINE('New client added to the database.');
END;

-- PROCEDURE DEMONSTRATION --
-- ADD CLIENT
BEGIN
add_client('Vlad', 'Malashchuk', 25, 'vladmalas@example.com', '111-222-333');
END;
-- INC BALLANCE WHERE ID=1
BEGIN
increase_account_balance(1,100);
END;


--------------------------------- EXPLAIN PLAN -----------------------------------

EXPLAIN PLAN FOR
SELECT Client.FirstName, SUM(Transactionw.Amount) as TotalAmount
FROM Client
INNER JOIN Account ON Client.ClientID = Account.ClientID
INNER JOIN Transactionw ON Account.AccountID = Transactionw.AccountID
WHERE Client.Age > 21
GROUP BY Client.FirstName;

-- Vypsání plánu provedení dotazu
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Vytvoření indexu pro sloupec "ClientID" v tabulce "Account"
CREATE INDEX idx_Account_ClientID ON Account(ClientID);

EXPLAIN PLAN FOR
SELECT Client.FirstName, SUM(Transactionw.Amount) as TotalAmount
FROM Client
INNER JOIN Account ON Client.ClientID = Account.ClientID
INNER JOIN Transactionw ON Account.AccountID = Transactionw.AccountID
WHERE Client.Age > 21
GROUP BY Client.FirstName;

-- Vypsání plánu provedení dotazu
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


----------------------------------- MATERIALIZED VIEW -----------------------------------
CREATE MATERIALIZED VIEW "account_trans_count" AS
SELECT
	"a"."ACCOUNTID",
	"a"."USERNAME",
	"a"."BALANCE",
	COUNT("a"."CLIENTID") AS "account_trans_count"
FROM "ACCOUNT" "a"
LEFT JOIN "TRANSACTIONW" "t" ON "t"."ACCOUNTID" = "a"."ACCOUNTID"
GROUP BY "a"."ACCOUNTID", "a"."USERNAME", "a"."BALANCE";

-- Výpis materializovaného pohledu.
SELECT * FROM "account_trans_count";

------------- SELECT WITH CASE make column with type of account. If Balance less then 300 its REGULAR account, BETWEEN 300 AND 500 is GOLD, more then 500 is PLATINUM ---------------
WITH AccountBalance AS (
SELECT AccountID, SUM(Amount) AS Balance
FROM Transactionw
GROUP BY AccountID
),
AccountType AS (
SELECT AccountID,
CASE
    WHEN Balance BETWEEN 300 AND 500 THEN 'Gold'
    WHEN Balance > 500 THEN 'Platinum'
    ELSE 'Regular'
END AS Type
FROM AccountBalance
)
SELECT a.UserName, a.Currency, a.Balance, t.Type
FROM Account a
JOIN AccountType t ON a.AccountID = t.AccountID;

-------------------------------- PRIVILEGES ------------------------------------

GRANT ALL ON "BANKEMPLOYEE" TO xmalas04;
GRANT ALL ON "CLIENT" TO xmalas04;
GRANT ALL ON "ACCOUNT" TO xmalas04;
GRANT ALL ON "TRANSACTIONW" TO xmalas04;
GRANT ALL ON "ACCOUNTSTATEMENT" TO xmalas04;

GRANT EXECUTE ON "ADD_CLIENT" TO xmalas04;
GRANT EXECUTE ON "INCREASE_ACCOUNT_BALANCE" TO xmalas04;

GRANT ALL ON "account_trans_count" TO xmalas04;